import asyncio
from ai_module import VulnerabilityDetector, generate_synthetic_data
from traffic_analysis import TrafficMonitor
import sys
import re

class ProjectLove:
    def __init__(self):
        self.detector = VulnerabilityDetector('bert')
        self.monitor = TrafficMonitor('bert')
    
    def train_model(self):
        print("Training the AI model...")
        requests, labels = generate_synthetic_data(100000)  # Generate more data for better training
        self.detector.train(requests, labels)
        print("Model training complete.")
    
    async def scan_target(self, target_url):
        print(f"Scanning target: {target_url}")
        await self.monitor.monitor_url(target_url)
    
    def show_menu(self):
        print("Project Love - Advanced AI-based Vulnerability Scanner")
        print("1. Scan a target")
        print("2. Train the model")
        print("3. SQL Injection Test")
        print("4. Cross-Site Scripting (XSS) Test")
        print("5. Help")
        print("6. Exit")
        choice = input("Enter your choice: ")
        return choice
    
    def show_help(self):
        print("Project Love Help:")
        print("This tool uses advanced AI to detect vulnerabilities based on the OWASP Top 10.")
        print("Options:")
        print("1. Scan a target: Enter a URL to scan for vulnerabilities.")
        print("2. Train the model: Improve the AI by training on new data.")
        print("3. SQL Injection Test: Test a specific input for SQL injection vulnerabilities.")
        print("4. Cross-Site Scripting (XSS) Test: Test a specific input for XSS vulnerabilities.")
        print("5. Help: Show this help message.")
        print("6. Exit: Close the program.")

    def test_sql_injection(self):
        input_string = input("Enter the string to test for SQL injection: ")
        sql_pattern = r'(SELECT|INSERT|UPDATE|DELETE|UNION|DROP).*FROM'
        if re.search(sql_pattern, input_string, re.IGNORECASE):
            print("Warning: Potential SQL injection detected!")
        else:
            print("No SQL injection detected in the input.")

    def test_xss(self):
        input_string = input("Enter the string to test for XSS: ")
        xss_pattern = r'<script>.*</script>'
        if re.search(xss_pattern, input_string, re.IGNORECASE):
            print("Warning: Potential XSS vulnerability detected!")
        else:
            print("No XSS vulnerability detected in the input.")

    async def run(self):
        while True:
            choice = self.show_menu()
            if choice == '1':
                target = input("Enter the target URL: ")
                await self.scan_target(target)
            elif choice == '2':
                self.train_model()
            elif choice == '3':
                self.test_sql_injection()
            elif choice == '4':
                self.test_xss()
            elif choice == '5':
                self.show_help()
            elif choice == '6':
                print("Thank you for using Project Love. Goodbye!")
                sys.exit(0)
            else:
                print("Invalid choice. Please try again.")

async def main():
    project_love = ProjectLove()
    await project_love.run()

if __name__ == "__main__":
    asyncio.run(main())