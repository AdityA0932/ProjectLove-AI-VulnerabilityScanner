import asyncio
import aiohttp
from collections import deque
import os
from ai_module import VulnerabilityDetector, log_vulnerability, perform_anomaly_detection, time_series_analysis

class TrafficMonitor:
    def __init__(self, model_type='bert'):
        self.detector = None
        self.model_type = model_type
        self.request_history = deque(maxlen=1000)
        self.feedback_data = []
        self.feedback_labels = []
        self.initialize_detector()

    def initialize_detector(self):
        self.detector = VulnerabilityDetector(self.model_type)
        model_path = f'models/vulnerability_detector_{self.model_type}'
        tokenizer_path = f'models/tokenizer_{self.model_type}'

        if os.path.exists(model_path) and os.path.exists(tokenizer_path):
            self.detector.load(model_path, tokenizer_path)
        else:
            print("No pre-trained model found. Training a new model...")
            self.train_initial_model()

    def train_initial_model(self):
        # Generate synthetic data for initial training
        from ai_module import generate_synthetic_data
        requests, labels = generate_synthetic_data(10000)
        self.detector.train(requests, labels)
        print("Initial model training complete.")

    async def monitor_url(self, url):
        async with aiohttp.ClientSession() as session:
            while True:
                try:
                    async with session.get(url) as response:
                        if response.status == 200:
                            content = await response.text()
                            print(f"Received content from {url}: {content[:50]}...")

                            # Check for vulnerability
                            if self.detector is None:
                                print("Detector not initialized. Reinitializing...")
                                self.initialize_detector()

                            prediction, vuln_types = self.detector.predict([content])[0]
                            if prediction == 1:
                                print(f"Vulnerability detected: {', '.join(vuln_types)}")
                                log_vulnerability(content)
                            else:
                                print("No vulnerability detected.")

                            # Add to request history
                            self.request_history.append(content)

                            # Ask for feedback
                            feedback = input("Is this prediction correct? (y/n): ")
                            if feedback.lower() == 'n':
                                correct_label = int(input("Enter the correct label (0 for safe, 1 for vulnerable): "))
                                self.feedback_data.append(content)
                                self.feedback_labels.append(correct_label)

                            # Perform periodic analysis and retraining
                            if len(self.request_history) % 100 == 0:
                                await self.periodic_analysis()
                                self.retrain_model()

                        else:
                            print(f"Failed to retrieve traffic from {url}, Status code: {response.status}")
                except Exception as e:
                    print(f"Error occurred while monitoring {url}: {str(e)}")
                    # Reinitialize detector if it's None
                    if self.detector is None:
                        print("Reinitializing detector...")
                        self.initialize_detector()

                await asyncio.sleep(5)

    async def periodic_analysis(self):
        print("Performing periodic analysis...")
        anomalies = perform_anomaly_detection(list(self.request_history), self.detector)
        print(f"Detected {len(anomalies)} anomalies in the last {len(self.request_history)} requests.")

        ts_analysis = time_series_analysis(list(self.request_history))
        print("Time series analysis complete. You can visualize this data if needed.")

    def retrain_model(self):
        if len(self.feedback_data) > 50:  # Retrain after collecting enough feedback
            print("Retraining the model with new data...")
            self.detector.train(self.feedback_data, self.feedback_labels)
            self.feedback_data = []
            self.feedback_labels = []
            print("Model retraining complete.")

    async def monitor_multiple_urls(self, urls):
        tasks = [self.monitor_url(url) for url in urls]
        await asyncio.gather(*tasks)

async def main():
    monitor = TrafficMonitor()
    urls = ["https://example.com", "https://avrdc.org/?id=10"]  # Add your target URLs here
    await monitor.monitor_multiple_urls(urls)

if __name__ == "__main__":
    asyncio.run(main())